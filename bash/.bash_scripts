#!/bin/bash

# .bash_scripts [Saulo G. Felix]

# cb - copy to clipboard
# A shortcut function that simplifies usage of xclip.
# Accepts input from either stdin (pipe), or params.
cb() {
  local _scs_col="\e[01;34m"; local _wrn_col='\e[01;31m'; local _trn_col='\e[01;33m'
  # Check that xclip is installed.
  if ! type xclip > /dev/null 2>&1; then
    echo -e "$_wrn_col""You must have the 'xclip' program installed.\e[0m"
  # Check user is not root (root doesn't have access to user xorg server)
  elif [[ "$USER" == "root" ]]; then
    echo -e "$_wrn_col""Must be regular user (not root) to copy a file to the clipboard.\e[0m"
  else
    # If no tty, data should be available on stdin
    if ! [[ "$( tty )" == /dev/* ]]; then
      input="$(< /dev/stdin)"
    # Else, fetch input from params
    else
      input="$*"
    fi
    if [ -z "$input" ]; then  # If no input, print usage message.
      echo "Copies a string to the clipboard."
      echo "Usage: cb <string>"
      echo "       echo <string> | cb"
    else
      # Copy input to clipboard
      echo -n "$input" | xclip -selection c
      # Truncate text for status
      if [ ${#input} -gt 80 ]; then input="$(echo $input | cut -c1-80)$_trn_col...\e[0m"; fi
      # Print status.
      echo -e "$_scs_col""Copied to clipboard:\e[0m $input"
    fi
  fi
}

cbf() {
	cat "$@" | cb
}


# FZF scritps adapted to handle git repositories
# See `bashrc` to remember how to use it
is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

fzf-down() {
  fzf --multi --inline-info --height 50% -1 --layout reverse  --border none --bind ctrl-/:toggle-preview "$@"
}

_gf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. --height 100% --preview-window right,border \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1})' |
  cut -c4- | sed 's/.* -> //'
}

_gb() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window up,5,border-horizontal \
    --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1)' |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

_gt() {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-down --multi \
    --preview 'git show --color=always {}'
}

_gh() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --height 70% --reverse --multi --preview-window up,10,border-horizontal \
 	--bind 'ctrl-y:execute-silent(grep -o "[a-f0-9]\{7,\}" <<< {} | xclip -i -selection clipboard)+abort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always' | grep -o "[a-f0-9]\{7,\}"
}

_gr() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf-down --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1}' |
  cut -d$'\t' -f1
}

_gs() {
  is_in_git_repo || return
  git stash list | fzf-down --reverse -d: --preview 'git show --color=always {1}' |
  cut -d: -f1
}

diary_add() {
	FILE_EMPTY=$(nb search --utility rg ${DIARY_PATH} ${FILE_NAME} 2>/dev/null | grep "Match")
	if [ -z "$FILE_EMPTY" ]; then
		nb add --edit ${DIARY_PATH}${FILE_NAME} --title "Today's events [$TODAYS_DATE]"
	else
		nb edit ${DIARY_PATH}${FILE_NAME} 
	fi
}

wiki_list() {
	if [[ ${args2} == art* ]]; then
		nb list --filenames wiki:artigos/
	elif [[ ${args2} == dis* ]]; then
		nb list --filenames wiki:discussao/
	elif [[ ${args2} == infob* ]]; then
		nb list --filenames wiki:infobox/
	elif [[ ${args2} == ver* ]]; then
		nb list --filenames wiki:verbetes/
	elif [[ ${args2} == ata* ]]; then
		nb list --filenames wiki:atalhos/
	elif [[ ${args2} == "notes" ]] || [[ ${args2} == anot* ]]; then
		nb list --filenames wiki:anotacoes/
	fi
}

wiki_atalhos() {
	local atalhos_path="wiki:atalhos/"
	local lista="wiki_lista_de_atalhos.md"
	local usuario="wiki_paginas_de_usuario.md"
	local comum="wiki_paginas_frequentes.md"
	if [[ ${args2} == "" ]] || [[ ${args2} == freq* ]]; then 
		nb edit ${atalhos_path}${comum}
	elif [[ ${args2} == "show" ]] || [[ ${args2} == "open" ]]; then
		nb peek wiki:atalhos/
	elif [[ ${args2} == "pu" ]] || [[ ${args2} == us* ]]; then
		nb edit ${atalhos_path}${usuario}
	elif [[ ${args2} == lis* ]] || [[ ${args2} == "all" ]]; then
		nb edit ${atalhos_path}${lista}
	fi
}

nbwiki() {
	local wiki="wiki:verbetes/"
	local vigia="wiki_vigia.md"
	local traduz="wiki_traduz.md"
	local menores="wiki_menores.md"
	local expande="wiki_expande.md"
	if [ $# -eq 0 ]; then
		nb peek wiki:
	elif [ "$1" == "artigos" ]; then
		if  [ "$2" == "" ]; then
			nb peek wiki:artigos/
		elif [[ "$2" == "list" ]] || [[ "$2" == "ls" ]]; then
			nb list --filenames wiki:artigos/
		else
			echo "Command not found"
		fi
	elif [ "$1" == "list" ]; then
		args2=$2
		wiki_list
	else
		if [[ "$1" == "expande" ]] || [[ "$1" == "ex" ]]; then
			nb edit ${wiki}${expande}
		elif [[ "$1" == menor* ]] || [[ "$1" == "m" ]] || [[ "$1" == peq* ]]; then
			nb edit ${wiki}${menores}
		elif [[ "$1" == "traduz" ]] || [[ "$1" == "tr" ]] || [[ "$1" == "translate" ]]; then
			nb edit ${wiki}${traduz}
		elif [[ "$1" == "vigia" ]] || [[ "$1" == "v" ]] || [[ "$1" == "watch" ]]; then
			nb edit ${wiki}${vigia}
		elif [[ "$1" == "list" ]] || [[ "$1" == "ls" ]]; then
			nb list wiki:
		elif [[ "$1" == "sync" ]]; then
			nb use wiki >/dev/null 2>&1 && nb sync 
		elif [[ "$1" == "atalhos" ]] || [[ "$1" == "shortcuts" ]] || [[ "$1" == ata* ]]; then
			args2=$2
			args3=$3
			wiki_atalhos
		fi
	fi
}

diary_add() {
	FILE_EMPTY=$(nb ls --filenames ${DIARY_PATH} ${FILE_NAME} 2>/dev/null | grep ".md")
	if [ -z "$FILE_EMPTY" ]; then
		nb add --edit ${DIARY_PATH}${FILE_NAME} --title "Today's events [$TODAYS_DATE]"
	else
		nb edit ${DIARY_PATH}${FILE_NAME} 
	fi
}

nbdiary() {
	DIARY_PATH="home:diario/"
	FILE_NAME="`date +'%Y%m%d'`.md"
	TODAYS_DATE=`date`

	if [ $# -eq 0 ]; then
		diary_add
	else
		if [[ "$1" == edit* ]] || [[ "$1" == escr* ]] || [[ "$1" == "add" ]]; then
			if [[ ! "$2" == "" ]]; then
				nb edit ${DIARY_PATH}"$2"
			else
				diary_add
			fi
		elif [[ "$1" == "list" ]] || [[ "$1" == "ls" ]]; then
			if [[ "$2" == "" ]]; then
				nb list ${DIARY_PATH}
			else
				nb list "$2" ${DIARY_PATH}
			fi
		elif [[ "$1" == "open" ]] || [[ "$1" == "show" ]]; then
			nb peek ${DIARY_PATH}
		else
			DATE=$(date --date="$*" +"%Y%m%d" 2>/dev/null)
			TODAY=$(date +"%Y%m%d")
			if [[ ${DATE} == ${TODAY} ]]; then
				diary_add
			elif [ ! -z ${DATE} ]; then
				FILE_NAME=${DATE}.md
				nb edit ${DIARY_PATH}${FILE_NAME}
			fi
		fi
	fi
}

quick_add() {
	FILE_EMPTY=$(nb ls --filenames ${QUICK_NOTES_PATH} ${FILE_NAME} 2>/dev/null | grep ".md")
	if [ -z "$FILE_EMPTY" ]; then
		nb add --edit ${QUICK_NOTES_PATH}${FILE_NAME} --title "Quick note [$TODAYS_DATE]"
	else
		nb edit ${QUICK_NOTES_PATH}${FILE_NAME} 
	fi
}

# Taking quick notes. Opens text file in text editor (vim)
# New notes are indexed and registered in version control
nbquick() {
	QUICK_NOTES_PATH="home:quick/"
	FILE_NAME="`date +'%d%m%Y%H%M%S'`.md"
	TODAYS_DATE=`date`

	if [ $# -eq 0 ]; then
	    quick_add	
    else
        if [[ "$1" == "list" ]] || [[ "$1" == "ls" ]]; then
            if [[ "$2" == "" ]]; then
                nb list ${QUICK_NOTES_PATH}
            else
                nb list "$2" ${QUICK_NOTES_PATH}
            fi
        elif [[ "$1" == "open" ]] || [[ "$1" == "show" ]]; then
            nb peek ${QUICK_NOTES_PATH}
        elif [[ "$1" == "edit" ]] || [[ "$1" == "last" ]] || [[ "$1" == "e" ]]; then
            nb edit "$(nb list --no-index --paths home:quick/ -1 | head -qn1)" 2>/dev/null
        elif [[ "$1" == del* ]] || [[ "$1" == "rm" ]]; then
            nb delete "$(nb list --no-index --paths home:quick/ -1 | head -qn1)" 2>/dev/null
        fi
    fi
}

# Opens nb repository folder in ranger
nbrepo() {
    local repo=$NB_DIR
    local home="home:"
    local linux="linux:"
    local academia="academia:"
    local home_listas=$home"listas"
    local filmes="01_01_2021_filmes.md"
    local musicas="01_01_2021_musicas.md"
    local livros="31_01_2022_livros.md"
    local sed="03_02_2022_sed_regex_magic.md"
    local vim="03_02_2022_vim_commands.md"
    if [[ -z "$1" ]]; then
        ranger $repo
    elif [[ "$1" == "home" ]] ; then
        nb peek $home
    elif [[ "$1" == "linux" ]] ; then
        nb peek $linux
    elif [[ "$1" == acad* ]] || [[ "$1" == "ufs" ]] ; then
        nb peek $academia
	elif [[ "$1" == movi* ]] || [[ "$1" == fil* ]] ; then
		nb edit $home_listas/$filmes
    elif [[ "$1" == "sed" ]] || [[ "$1" == reg* ]] ; then
        nb edit $home_listas/$sed
	elif [[ "$1" == musi* ]] ; then
		nb edit $home_listas/$musicas
    elif [[ "$1" == "vim" ]] ; then
        nb edit $home_listas/$vim
	fi
}


# Automatically change the current working directory to the last 
# visited one after ranger quits.
function ranger-cd {
    local IFS=$'\t\n'
    local tempfile="$(mktemp -t tmp.XXXXXX)"
    local ranger_cmd=(
        command
        ranger
        --cmd="map Q chain shell echo %d > "$tempfile"; quitall"
    )

    ${ranger_cmd[@]} "$@"
    if [[ -f "$tempfile" ]] && [[ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]]; then
        cd -- "$(cat "$tempfile")" || return
    fi
    command rm -f -- "$tempfile" 2>/dev/null
}

nbsort_help() {
    echo 'Usage: nbsort [OPTIONS]... {-d [DIR] -t [TAG]}'
    echo 'Organize notes easily. Sort notes by tag, rename based on title'
    echo ''
    echo 'Use variable NB_DIR to configure local repository'
    echo 'Local repository is currently set to:' 
    echo '  '$repo
    echo ''
    echo 'Options:'
    echo '  -d, --dir    relative path to search for --tag, default'
    echo '                 root is set by NB_DIR'
    echo '  -f, --folder target directory where to put found notes'
    echo '  -l, --list   display tagged notes'
    echo '  -r, --repo   sets root directory'
    echo '  -t, --tag    search recursively for given tag'
    echo '  -h, --help   shows this page'
    echo ''
    echo 'Example:'
    echo '  nbsort -d my/notes -t physics --folder academia'
    echo ''
    echo 'Written by Saulo G. Felix 2022.'
    return 0
}

# Organizes notes. Notes are assumed to be named with fixed format.
# Notes are renamed to specific format. Titles are extracted from file.
# They are stored in the relative path passed by arguments. Root directory
# is set by environment variable NB_DIR
nbsort() {
    local repo=$NB_DIR
    local home=$repo/home
    local unix=$repo/linux
    local help=0
    local display=0
    local dir=
    local tag=
    local target=
    local files=

	if [ $# -lt 2 ]; then
        nbsort_help
        return 1
    else
        while [[ "$#" -gt 0 ]]; do case $1 in
                -f|--folder) target=$repo/${2%/}; shift ;;
                -d|--dir)    dir=${2%/};          shift ;;
                -l|--list)   display=1;           shift ;;
                -t|--tag)    tag="$2";            shift ;;
                -r|--repo)   repo=${2%/};         shift ;;
                -h|--help)   help=1;              shift ;;
                *) echo "nbsort: unknown parameter '$1'"; return 1;;
            esac
            shift
        done
        if [[ "$help" -eq 1 ]]; then nbsort_help; return 0; fi 
        if [[ -z "$tag" ]]; then return 0; else local files=`grep -l "#${tag}" $repo/$dir/*`; fi
        if [[ "$display" -eq 1 ]]; then echo "${files[@]}"; return 0; fi
        if [[ -z "$target" ]]; then return 0; fi
        for i in $files; do
            local name=`basename $i .md`
            echo "Found [ #$tag ] in '$i'"
            if [[ $name == ?(-)+([0-9]) ]] && [[ ${#name} -eq 14 ]]; then
                # get first 8 bytes of filename and format to %d_%m_%Y_
                filename=`basename $i`
                prefix=`echo $filename | cut --bytes=1-4 | sed -e 's/\(..\)/\1_/g'`
                suffix=`echo $filename | cut --bytes=5-8`

                # remove first line of file, jump blank line & get 3rd line
                sed '1d' $i | sed -e '0,/^[[:space:]]*$/{//d}' | sed '1s/^/# /' > /tmp/$filename.tmp
                title=`head -n 1 /tmp/$filename.tmp | sed -e 's/\(.*\)/\L\1/' -e 's/[$#%*&\._-~ã,;ôâêáó*&àéíõç]//g'`
                title=$prefix$suffix"${title// /_}".md

                # move file to specified location
                mv /tmp/$filename.tmp $target/$title
                if [ "$?" -ne 0 ]; then return 1
                else echo "'$NB_DIR/$dir/$filename' -> '$target/$title'"
                fi

                # cleanup. backup would probably be safer
                rm -rf $i.tmp >/dev/null 2>&1
                rm -rf $i >/dev/null 2>&1
            fi
        done
    fi
}

duckit() {
    w3m https://lite.duckduckgo.com/lite/?q="$@"
}
